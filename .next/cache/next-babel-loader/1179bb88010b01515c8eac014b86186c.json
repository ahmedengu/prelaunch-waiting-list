{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Parse from 'parse';\nimport cookie from 'js-cookie';\nimport Share from './share';\nimport { setUser } from '../store';\nimport Unverified from './unverified';\n\nclass LoggedIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subscription: undefined\n    };\n  }\n\n  componentDidMount() {\n    const {\n      subscription\n    } = this.state;\n    const {\n      setUserHandler,\n      user\n    } = this.props;\n\n    if (!subscription && user && user.objectId) {\n      const query = new Parse.Query(Parse.User);\n      query.equalTo('objectId', user.objectId);\n      query.subscribe().then(sub => {\n        this.setState({\n          subscription: sub\n        });\n        sub.on('close', () => {\n          this.setState({\n            subscription: undefined\n          });\n        });\n        sub.on('update', aUser => {\n          const userJson = aUser.toJSON();\n          setUserHandler(userJson);\n          cookie.set('user', userJson);\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      t,\n      user\n    } = this.props;\n    return __jsx(React.Fragment, null, user && !user.emailVerified && __jsx(Unverified, {\n      t: t,\n      email: user.email || user.username\n    }), __jsx(Share, {\n      t: t\n    }));\n  }\n\n}\n\nLoggedIn.propTypes = {\n  t: PropTypes.func.isRequired,\n  setUserHandler: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nconst mapDispatchToProps = {\n  setUserHandler: setUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoggedIn);","map":{"version":3,"sources":["C:\\Users\\Mahmoud\\merquant_prelunch\\components\\loggedIn.jsx"],"names":["React","PropTypes","connect","Parse","cookie","Share","setUser","Unverified","LoggedIn","Component","constructor","props","state","subscription","undefined","componentDidMount","setUserHandler","user","objectId","query","Query","User","equalTo","subscribe","then","sub","setState","on","aUser","userJson","toJSON","set","render","t","emailVerified","email","username","propTypes","func","isRequired","object","mapStateToProps","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,QAAN,SAAuBR,KAAK,CAACS,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,YAAY,EAAEC;AAAhB,KAAb;AACD;;AAGDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEF,MAAAA;AAAF,QAAmB,KAAKD,KAA9B;AACA,UAAM;AAAEI,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAA2B,KAAKN,KAAtC;;AAEA,QAAI,CAACE,YAAD,IAAiBI,IAAjB,IAAyBA,IAAI,CAACC,QAAlC,EAA4C;AAC1C,YAAMC,KAAK,GAAG,IAAIhB,KAAK,CAACiB,KAAV,CAAgBjB,KAAK,CAACkB,IAAtB,CAAd;AACAF,MAAAA,KAAK,CAACG,OAAN,CAAc,UAAd,EAA0BL,IAAI,CAACC,QAA/B;AACAC,MAAAA,KAAK,CAACI,SAAN,GACGC,IADH,CACSC,GAAD,IAAS;AACb,aAAKC,QAAL,CAAc;AAAEb,UAAAA,YAAY,EAAEY;AAAhB,SAAd;AAEAA,QAAAA,GAAG,CAACE,EAAJ,CAAO,OAAP,EAAgB,MAAM;AACpB,eAAKD,QAAL,CAAc;AAAEb,YAAAA,YAAY,EAAEC;AAAhB,WAAd;AACD,SAFD;AAIAW,QAAAA,GAAG,CAACE,EAAJ,CAAO,QAAP,EAAkBC,KAAD,IAAW;AAC1B,gBAAMC,QAAQ,GAAID,KAAD,CAAQE,MAAR,EAAjB;AACAd,UAAAA,cAAc,CAACa,QAAD,CAAd;AACAzB,UAAAA,MAAM,CAAC2B,GAAP,CAAW,MAAX,EAAmBF,QAAnB;AACD,SAJD;AAKD,OAbH;AAcD;AACF;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,CAAF;AAAKhB,MAAAA;AAAL,QAAc,KAAKN,KAAzB;AACA,WACE,4BACGM,IAAI,IAAI,CAACA,IAAI,CAACiB,aAAd,IACC,MAAC,UAAD;AAAY,MAAA,CAAC,EAAED,CAAf;AAAkB,MAAA,KAAK,EAAEhB,IAAI,CAACkB,KAAL,IAAclB,IAAI,CAACmB;AAA5C,MAFJ,EAIE,MAAC,KAAD;AAAO,MAAA,CAAC,EAAEH;AAAV,MAJF,CADF;AASD;;AA1CoC;;AA6CvCzB,QAAQ,CAAC6B,SAAT,GAAqB;AACnBJ,EAAAA,CAAC,EAAEhC,SAAS,CAACqC,IAAV,CAAeC,UADC;AAEnBvB,EAAAA,cAAc,EAAEf,SAAS,CAACqC,IAAV,CAAeC,UAFZ;AAGnBtB,EAAAA,IAAI,EAAEhB,SAAS,CAACuC,MAAV,CAAiBD;AAHJ,CAArB;;AAMA,MAAME,eAAe,GAAI7B,KAAD,KAAY;AAClCK,EAAAA,IAAI,EAAEL,KAAK,CAACK;AADsB,CAAZ,CAAxB;;AAIA,MAAMyB,kBAAkB,GAAG;AACzB1B,EAAAA,cAAc,EAAEV;AADS,CAA3B;AAIA,eAAeJ,OAAO,CAACuC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ClC,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport Parse from 'parse';\r\nimport cookie from 'js-cookie';\r\nimport Share from './share';\r\nimport { setUser } from '../store';\r\nimport Unverified from './unverified';\r\n\r\nclass LoggedIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { subscription: undefined };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const { subscription } = this.state;\r\n    const { setUserHandler, user } = this.props;\r\n\r\n    if (!subscription && user && user.objectId) {\r\n      const query = new Parse.Query(Parse.User);\r\n      query.equalTo('objectId', user.objectId);\r\n      query.subscribe()\r\n        .then((sub) => {\r\n          this.setState({ subscription: sub });\r\n\r\n          sub.on('close', () => {\r\n            this.setState({ subscription: undefined });\r\n          });\r\n\r\n          sub.on('update', (aUser) => {\r\n            const userJson = (aUser).toJSON();\r\n            setUserHandler(userJson);\r\n            cookie.set('user', userJson);\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { t, user } = this.props;\r\n    return (\r\n      <>\r\n        {user && !user.emailVerified && (\r\n          <Unverified t={t} email={user.email || user.username} />\r\n        )}\r\n        <Share t={t} />\r\n        {/* <Gifts t={t} /> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nLoggedIn.propTypes = {\r\n  t: PropTypes.func.isRequired,\r\n  setUserHandler: PropTypes.func.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setUserHandler: setUser,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoggedIn);\r\n"]},"metadata":{},"sourceType":"module"}