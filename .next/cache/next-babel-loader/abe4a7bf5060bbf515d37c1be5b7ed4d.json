{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { initializeStore } from '../store';\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nexport default (App => class AppWithRedux extends React.Component {\n  static async getInitialProps(appContext) {\n    // Get or Create the store with `undefined` as initialState\n    // This allows you to set a custom default initialState\n    const reduxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages\n\n    appContext.ctx.reduxStore = reduxStore;\n    let appProps = {};\n\n    if (typeof App.getInitialProps === 'function') {\n      appProps = await App.getInitialProps(appContext);\n    }\n\n    return _objectSpread({}, appProps, {\n      initialReduxState: reduxStore.getState()\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.reduxStore = getOrCreateStore(props.initialReduxState);\n  }\n\n  render() {\n    return __jsx(App, _extends({}, this.props, {\n      reduxStore: this.reduxStore\n    }));\n  }\n\n});","map":{"version":3,"sources":["C:\\Users\\Mahmoud\\merquant_prelunch\\lib\\with-redux-store.jsx"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","App","AppWithRedux","Component","getInitialProps","appContext","reduxStore","ctx","appProps","initialReduxState","getState","constructor","props","render"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC;AACA,MAAIH,QAAJ,EAAc;AACZ,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD,GAJqC,CAMtC;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD;;AAED,gBAAgBI,GAAD,IAAS,MAAMC,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAA2C;AACjE,eAAaC,eAAb,CAA6BC,UAA7B,EAAyC;AACvC;AACA;AACA,UAAMC,UAAU,GAAGR,gBAAgB,EAAnC,CAHuC,CAKvC;;AACAO,IAAAA,UAAU,CAACE,GAAX,CAAeD,UAAf,GAA4BA,UAA5B;AAEA,QAAIE,QAAQ,GAAG,EAAf;;AACA,QAAI,OAAOP,GAAG,CAACG,eAAX,KAA+B,UAAnC,EAA+C;AAC7CI,MAAAA,QAAQ,GAAG,MAAMP,GAAG,CAACG,eAAJ,CAAoBC,UAApB,CAAjB;AACD;;AAED,6BACKG,QADL;AAEEC,MAAAA,iBAAiB,EAAEH,UAAU,CAACI,QAAX;AAFrB;AAID;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKN,UAAL,GAAkBR,gBAAgB,CAACc,KAAK,CAACH,iBAAP,CAAlC;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,WAAO,MAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,MAAA,UAAU,EAAE,KAAKN;AAAtC,OAAP;AACD;;AA3BgE,CAAnE","sourcesContent":["import React from 'react';\r\nimport { initializeStore } from '../store';\r\n\r\nconst isServer = typeof window === 'undefined';\r\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\r\n\r\nfunction getOrCreateStore(initialState) {\r\n  // Always make a new store if server, otherwise state is shared between requests\r\n  if (isServer) {\r\n    return initializeStore(initialState);\r\n  }\r\n\r\n  // Create store if unavailable on the client and set it on the window object\r\n  if (!window[__NEXT_REDUX_STORE__]) {\r\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n  }\r\n  return window[__NEXT_REDUX_STORE__];\r\n}\r\n\r\nexport default (App) => class AppWithRedux extends React.Component {\r\n  static async getInitialProps(appContext) {\r\n    // Get or Create the store with `undefined` as initialState\r\n    // This allows you to set a custom default initialState\r\n    const reduxStore = getOrCreateStore();\r\n\r\n    // Provide the store to getInitialProps of pages\r\n    appContext.ctx.reduxStore = reduxStore;\r\n\r\n    let appProps = {};\r\n    if (typeof App.getInitialProps === 'function') {\r\n      appProps = await App.getInitialProps(appContext);\r\n    }\r\n\r\n    return {\r\n      ...appProps,\r\n      initialReduxState: reduxStore.getState(),\r\n    };\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.reduxStore = getOrCreateStore(props.initialReduxState);\r\n  }\r\n\r\n  render() {\r\n    return <App {...this.props} reduxStore={this.reduxStore} />;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}