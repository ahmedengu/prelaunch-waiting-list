{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport Router from 'next/router';\nimport * as qs from 'qs';\nimport { codes, countries } from '../constants';\n\nvar _default =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_default).apply(this, arguments));\n  }\n\n  _createClass(_default, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var res, req, _req$query, subpath, lng, query, queryString, country, geoip, geo;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                res = _ref.res, req = _ref.req;\n                _req$query = req.query, subpath = _req$query.subpath, lng = _req$query.lng, query = _objectWithoutProperties(_req$query, [\"subpath\", \"lng\"]);\n                queryString = _Object$keys(query).length ? \"?\".concat(qs.stringify(query)) : '';\n                country = 'egypt';\n\n                if (!process.browser) {\n                  geoip = require('geoip-country');\n                  geo = geoip.lookup(req.ip);\n                  country = geo && geo.country && codes.includes(geo.country) ? countries[codes.indexOf(geo.country)] : 'egypt';\n                }\n\n                if (res) {\n                  res.writeHead(302, {\n                    Location: \"/\".concat(country).concat(queryString)\n                  });\n                  res.end();\n                } else {\n                  Router.push(\"/\".concat(country).concat(queryString));\n                }\n\n                return _context.abrupt(\"return\", {});\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["C:\\Users\\Mahmoud\\merquant_prelunch\\pages\\index.jsx"],"names":["React","Router","qs","codes","countries","res","req","query","subpath","lng","queryString","length","stringify","country","process","browser","geoip","require","geo","lookup","ip","includes","indexOf","writeHead","Location","end","push","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,cAAjC;;;;;;;;;;;;;;;;;;;;;;;;;AAGiCC,gBAAAA,G,QAAAA,G,EAAKC,G,QAAAA,G;6BACYA,G,CAAtCC,K,EAASC,O,cAAAA,O,EAASC,G,cAAAA,G,EAAQF,K;AAC5BG,gBAAAA,W,GAAc,aAAYH,KAAZ,EAAmBI,MAAnB,cAAgCT,EAAE,CAACU,SAAH,CAAaL,KAAb,CAAhC,IAAwD,E;AACxEM,gBAAAA,O,GAAU,O;;AAEd,oBAAI,CAACC,OAAO,CAACC,OAAb,EAAsB;AACdC,kBAAAA,KADc,GACNC,OAAO,CAAC,eAAD,CADD;AAEdC,kBAAAA,GAFc,GAERF,KAAK,CAACG,MAAN,CAAab,GAAG,CAACc,EAAjB,CAFQ;AAGpBP,kBAAAA,OAAO,GAAGK,GAAG,IAAIA,GAAG,CAACL,OAAX,IAAsBV,KAAK,CAACkB,QAAN,CAAeH,GAAG,CAACL,OAAnB,CAAtB,GACNT,SAAS,CAACD,KAAK,CAACmB,OAAN,CAAcJ,GAAG,CAACL,OAAlB,CAAD,CADH,GAEN,OAFJ;AAGD;;AAED,oBAAIR,GAAJ,EAAS;AACPA,kBAAAA,GAAG,CAACkB,SAAJ,CAAc,GAAd,EAAmB;AACjBC,oBAAAA,QAAQ,aAAMX,OAAN,SAAgBH,WAAhB;AADS,mBAAnB;AAGAL,kBAAAA,GAAG,CAACoB,GAAJ;AACD,iBALD,MAKO;AACLxB,kBAAAA,MAAM,CAACyB,IAAP,YAAgBb,OAAhB,SAA0BH,WAA1B;AACD;;iDACM,E;;;;;;;;;;;;;;;;;;;EAtBkBV,KAAK,CAAC2B,S","sourcesContent":["import React from 'react';\r\nimport Router from 'next/router';\r\nimport * as qs from 'qs';\r\nimport { codes, countries } from '../constants';\r\n\r\nexport default class extends React.Component {\r\n  static async getInitialProps({ res, req }) {\r\n    const { query: { subpath, lng, ...query } } = req;\r\n    const queryString = Object.keys(query).length ? `?${qs.stringify(query)}` : '';\r\n    let country = 'egypt';\r\n\r\n    if (!process.browser) {\r\n      const geoip = require('geoip-country');\r\n      const geo = geoip.lookup(req.ip);\r\n      country = geo && geo.country && codes.includes(geo.country)\r\n        ? countries[codes.indexOf(geo.country)]\r\n        : 'egypt';\r\n    }\r\n\r\n    if (res) {\r\n      res.writeHead(302, {\r\n        Location: `/${country}${queryString}`,\r\n      });\r\n      res.end();\r\n    } else {\r\n      Router.push(`/${country}${queryString}`);\r\n    }\r\n    return {};\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}